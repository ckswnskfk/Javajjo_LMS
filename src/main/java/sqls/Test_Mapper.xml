<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="happy.jaj.prj.Test_Mapper">

	<!-- 문제번호로 문제 코드 조회 -->
	<select id="test_examcodeselect" parameterType="java.util.Map" resultType="java.lang.String">
	SELECT EXAMCODE
	FROM TEST_EXAM
		WHERE TESTCODE = #{testcode}
			AND EXAMNUM = #{examnum}
	</select>

	<!-- 과정을 수강하는 학생 목록 조회 -->
	<select id="test_coursestu" parameterType="java.lang.String" resultType="StudentDTO">
	SELECT ID, NAME
	FROM USERCOURSE JOIN STUDENT USING (ID)
	WHERE COURSECODE = #{coursecode}
	</select>

	<!-- 시험의 문제갯수 조회 -->
	<select id="test_examcount" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT COUNT(*)
	FROM TEST_EXAM	
	WHERE TESTCODE = #{testcode}
	</select>

	<!-- 학생 수강 과정 조회 -->
	<select id="test_courselist" parameterType="java.lang.String" resultType="CourseDTO">
		SELECT COURSENAME, STARTDATE, COURSECNT, COURSECODE
  		FROM USERCOURSE JOIN COURSE 
  		USING (COURSECODE) WHERE USERCOURSE.ID = #{id}
  	</select>

	<!-- 과제에 연결된 문제 삭제 -->
	<delete id="test_deltestexam" parameterType="TestExamDTO">
	DELETE FROM TEST_EXAM
	WHERE TESTCODE=#{testcode} AND EXAMCODE=#{examcode}
	</delete>
	
	<!-- 과제에 연결되 문제 모두 삭제 -->
	<delete id="test_deltestall" parameterType="java.lang.String">
	DELETE FROM TEST_EXAM
	WHERE TESTCODE=#{testcode} 
	</delete>

	<!-- 과정명이 동일한 과정들 중 회차를 선택해 문제 조회 -->
	<select id="test_coursecopy" parameterType="java.util.Map" resultType="TestExamDTO">
	SELECT EXAMCODE, TESTCODE, ALLOT, EXAMNUM 
	FROM TEST_EXAM 
	WHERE TESTCODE IN
	(SELECT TESTCODE 
	FROM COURSE_SUBJECT JOIN SUBJECT_TEST USING (SUBJECTCODE) 
	WHERE SUBJECT_TEST.COURSECODE = #{coursecode}
	AND SUBJECTCODE =#{subjectcode})
	</select>

	<!-- 시험의 최대 번호 조회 -->
	<select id="test_maxexamnum" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT CASE NUM WHEN 0 THEN 1 ELSE NUM+1 END 
	FROM (SELECT COUNT(EXAMNUM) NUM
	FROM TEST_EXAM 
	WHERE TESTCODE=#{testcode})
	</select>

	<!-- 담당 과정 조회 -->
	<select id="test_course" parameterType="java.lang.String" resultType="CourseDTO">
	SELECT COURSECODE, COURSENAME, STARTDATE, COURSECNT
    FROM COURSE JOIN TEACHER USING(COURSECODE)
    WHERE ID = #{id}
    </select>
    
    <!-- 과정에 해당하는 과목 조회 -->
    <select id="test_subject" parameterType="java.lang.String" resultType="SubjectDTO">
    SELECT SUBJECTCODE, SUBJECTNAME, SUBJECTTYPE, EXAMTYPE, STARTDATE
  	FROM SUBJECT  JOIN COURSE_SUBJECT USING (SUBJECTCODE) 
  	WHERE COURSECODE = #{coursecode}
    </select>
    
    <!-- 과정명이 동일한 회차 조회 -->
    <select id="test_coursecnt" parameterType="java.lang.String" resultType="CourseDTO">
    SELECT COURSECNT, COURSECODE
	FROM COURSE
	WHERE COURSENAME = #{coursename}
    </select>
    
    <!-- 과목유형과 과제유형동일한 문제 조회(서술형) -->
    <select id="test_typedesc" parameterType="java.lang.String" resultType="ExamDesDTO">
    SELECT EXAMCODE, EXAM, EXPLANATION, STANDARD, C_ANSWER, ALLOT, EXAMNUM
	FROM TEST_EXAM JOIN EXAMDESCRIPTIVE USING (EXAMCODE)
		WHERE  TESTCODE IN 
(SELECT TESTCODE	
	FROM TEST
		WHERE SUBJECTTYPE = #{subjecttype} AND EXAMTYPE = '서술형')
    </select>
    
        <!-- 과목유형과 과제유형동일한 문제 조회(선택형) -->
    <select id="test_typesel" parameterType="java.lang.String" resultType="ExamSelDTO">
	SELECT  EXAM, EXAMCODE, C_ANSWER, EXAMNUM, ALLOT FROM TEST_EXAM JOIN
	EXAMSELECT USING (EXAMCODE) 
		WHERE TESTCODE IN (SELECT TESTCODE FROM TEST WHERE SUBJECTTYPE = #{type} AND EXAMTYPE = '선택형') 
	
    </select>

<!-- private String exam; -->
<!-- 	private String examcode; -->
<!-- 	private String c_answer; -->
<!-- 	private String examnum; -->
<!-- 	private String allot; -->
	<!--과제 추가 -->
	<insert id="test_insert" parameterType="TestDTO">
		<selectKey keyProperty="testcode" resultType="java.lang.String" order="BEFORE">
			SELECT 'T'|| LPAD((TO_NUMBER(SUBSTR(MAX(TESTCODE),2))+1),5,0) as testcode FROM TEST
		</selectKey>
		INSERT INTO TEST(TESTCODE, TESTNAME, SUBJECTTYPE, EXAMTYPE)
		VALUES(#{testcode}, #{testname}, #{subjecttype},#{examtype})
	</insert>

	<!-- 과목유형이 동일한 과제 조회 -->
	<select id="test_select" parameterType="java.util.Map"
		resultType="TestDTO">
		SELECT TESTCODE,TESTNAME
		FROM TEST
		WHERE SUBJECTTYPE = #{subjecttype} AND EXMANTYPE = #{examtype}
	</select>

	<!--과목에 과제등록(연결)  -->
	<insert id="se_insert" parameterType="SubjectTestDTO">
		INSERT INTO SUBJECT_TEST(SUBJECTCODE, TESTCODE, TESTDAY, COURSECODE)
		VALUES(#{subjectcode}, #{testcode}, #{testday}, #{coursecode})
	</insert>

	<!--과목의 과목유형과 과제유형이 동일한 과제 조회  -->
	<select id="se_select" parameterType="java.util.Map"
		resultType="SubjectTestDTO">
		SELECT TESTCODE, TESTNAME
		FROM SUBJECT_TEST JOIN TEST USING(TESTCODE)
		WHERE SUBJECTTYPE=#{subjecttype} AND EXAMTYPE=#{examtype}
	</select>

	<!--과목에 해당하는 과제 조회  -->
	<select id="se_testselect" parameterType="java.util.Map" resultType="SubjectTestDTO">
		SELECT SUBJECTCODE, TESTCODE,TESTNAME, TO_CHAR(TESTDAY, 'YYYY-MM-DD') AS TESTDAY
		FROM SUBJECT_TEST JOIN TEST USING (TESTCODE)
		WHERE SUBJECTCODE = #{subjectcode} 
		AND COURSECODE = #{coursecode}
	</select>

	<!--문제 등록(서술형)  -->
	<insert id="examdes_insert" parameterType="ExamDesDTO">
		<selectKey order="BEFORE" resultType="java.lang.String" keyProperty="examcode">
		SELECT 'ED'||LPAD((TO_NUMBER(SUBSTR(MAX(EXAMCODE),3))+1),5,0) AS EXAMCODE FROM
		EXAMDESCRIPTIVE
		</selectKey>
	INSERT INTO EXAMDESCRIPTIVE(EXAM, EXAMCODE, EXPLANATION, STANDARD, C_ANSWER)
		VALUES(#{exam}, #{examcode},#{explanation}, #{standard}, #{c_answer})
	</insert>
	
	<!--문제 등록(선택형)  -->
	<insert id="examsel_insert" parameterType="ExamSelDTO">
		<selectKey order="BEFORE" resultType="java.lang.String" keyProperty="examcode">
			SELECT 'ES'|| LPAD((TO_NUMBER(SUBSTR(MAX(EXAMCODE),3))+1),5,0) FROM EXAMSELECT
		</selectKey>
		INSERT INTO EXAMSELECT(EXAM, EXAMCODE, C_ANSWER)
		VALUES( #{exam}, #{examcode}, #{c_answer})
	</insert>
	
	
	
	<!--문제 수정(선택형)  -->
	<update id="examsel_modify" parameterType="ExamSelDTO">
		UPDATE EXAMSELECT SET EXAM = #{exam}, C_ANSWER=#{c_answer}
		WHERE EXAMCODE = #{examcode}
	</update>
	
	<!-- 문제 수정(서술형) -->
	<update id="examdes_modify" parameterType="ExamDesDTO">
		UPDATE EXAMDESCRIPTIVE SET EXAM = #{exam}, EXPLANATION=#{explanation}, STANDARD= #{standard}, C_ANSWER=#{c_answer}
        WHERE EXAMCODE = #{examcode}
	</update>
	
	

	<!--과제에 문제등록(연결)  -->
	<insert id="te_insert" parameterType="TestExamDTO">
		INSERT INTO TEST_EXAM(TESTCODE, EXAMCODE, ALLOT, EXAMNUM)
		VALUES(#{testcode}, #{examcode}, #{allot}, #{examnum})
	</insert>

	<!--과제에 연결된 문제수정(다이나믹쿼리)  -->
	<update id="te_modify" parameterType="TestExamDTO">
		UPDATE TEST_EXAM SET ALLOT=#{allot}, EXAMNUM=#{examnum}
		WHERE EXAMCODE = #{examcode}
	</update>

	<!--문제 총점 조회   -->
	<select id="te_selectsum" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT CASE WHEN SUM(ALLOT) > 0 THEN SUM(ALLOT) ELSE 0 END FROM TEST_EXAM
		WHERE TESTCODE=#{testcode}
		GROUP BY TESTCODE
	</select>
	
	<!-- 서술형 문제 조회 -->
	<select id="test_examdesc" parameterType="java.lang.String" resultType="ExamDesDTO">
	SELECT EXAM, EXAMCODE, EXPLANATION, STANDARD, C_ANSWER
	FROM EXAMDESCRIPTIVE
	WHERE EXAMCODE = #{examcode}
	</select>
	
	<!-- 선택형 문제 조회 -->
	<select id="test_examsel" parameterType="java.lang.String" resultType="ExamSelDTO">
	SELECT EXAM, EXAMCODE, C_ANSWER
	FROM EXAMSELECT
	WHERE EXAMCODE = #{examcode}
	</select>
	

	<!--과제에 해당하는 문제 조회(서술형)  -->
	<select id="te_select" parameterType="java.util.Map"
		resultType="ExamDesDTO">
		SELECT EXAM, EXAMCODE, C_ANSWER, EXAMNUM, ALLOT, EXPLANATION, STANDARD
		FROM TEST_EXAM JOIN EXAMDESCRIPTIVE USING(EXAMCODE)
		WHERE TESTCODE = #{testcode} AND EXAMNUM=#{examnum}
	</select>
	
	<!-- 과정-과목 seq조회 -->
	<select id="test_seqselect" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT SEQ
		FROM COURSE_SUBJECT
			WHERE COURSECODE = #{coursecode}
				AND SUBJECTCODE = #{subjectcode}
	</select>
	
	<!-- 과제 등록시 과제에 해당하는 문제 리스트 조회(서술형) -->
	<select id="test_testdesclist" parameterType="java.util.Map" resultType="TestExamDTO">
		SELECT TEST_EXAM.EXAMNUM, EXAMDESCRIPTIVE.EXAM, TEST_EXAM.ALLOT, TEST_EXAM.EXAMCODE, SUBJECT_TEST.SUBJECTCODE
		FROM SUBJECT_TEST
		JOIN TEST_EXAM ON SUBJECT_TEST.TESTCODE = TEST_EXAM.TESTCODE
		JOIN EXAMDESCRIPTIVE ON TEST_EXAM.EXAMCODE=EXAMDESCRIPTIVE.EXAMCODE
		WHERE TEST_EXAM.TESTCODE = #{testcode}
		AND SUBJECT_TEST.COURSECODE = #{coursecode}
		ORDER BY EXAMNUM
	</select>
	
	<!-- 과제에 해당하는 문제 리스트 조회 (서술형) -->
	<select id="te_selectlist" parameterType="java.lang.String" resultType="TestExamDTO">
		SELECT EXAMNUM, EXAM, ALLOT, EXAMCODE
		FROM TEST_EXAM JOIN EXAMDESCRIPTIVE USING(EXAMCODE)
		WHERE TESTCODE = #{testcode} 
		ORDER BY EXAMNUM
	</select>

	<!--과제에 해당하는 문제 조회(선택형)  -->
	<select id="te_testselect" parameterType="java.util.Map" resultType="ExamSelDTO">
		SELECT EXAM, EXAMCODE, C_ANSWER, EXAMNUM, ALLOT
		FROM TEST_EXAM JOIN EXAMSELECT USING(EXAMCODE)
		WHERE TESTCODE = #{testcode} AND EXAMNUM = #{examnum}
	</select>
	
	<!--과제에 해당하는 문제리스트 조회(선택형) -->
	<select id="te_testselectlist" parameterType="java.util.Map" resultType="TestExamDTO">
		SELECT TEST_EXAM.EXAMNUM, EXAMSELECT.EXAM, TEST_EXAM.ALLOT, EXAMSELECT.C_ANSWER, TEST_EXAM.EXAMCODE
		FROM SUBJECT_TEST JOIN TEST_EXAM ON SUBJECT_TEST.TESTCODE = TEST_EXAM.TESTCODE
		JOIN EXAMSELECT ON TEST_EXAM.EXAMCODE=EXAMSELECT.EXAMCODE
		WHERE TEST_EXAM.TESTCODE = #{testcode}
		AND SUBJECT_TEST.COURSECODE = #{coursecode}
		ORDER BY EXAMNUM
	</select>

	<!--문항 등록   -->
	<insert id="content_insert" parameterType="ContentSelectDTO">
		INSERT INTO CONTENTSELECT(EXAMCODE, CONTENTNUM, EXAMCONTENT)
		VALUES(#{examcode}, #{contentnum}, #{examcontent})
	</insert>

	<!--문항 수정   -->
	<update id="content_modify" parameterType="ContentSelectDTO">
		UPDATE CONTENTSELECT
		SET EXAMCONTENT=#{examcontent}
		WHERE EXAMCODE = #{examcode} AND CONTENTNUM=#{contentnum}
	</update>

	<!--문제의 문항 조회   -->
	<select id="content_select" parameterType="java.lang.String" resultType="ContentSelectDTO">
		SELECT CONTENTNUM, EXAMCONTENT
		FROM CONTENTSELECT
		WHERE EXAMCODE = #{examcode}
		ORDER BY CONTENTNUM
	</select>

	<!--학생 서술형 답안 등록  -->
	<insert id="answerd_insert" parameterType="AnswerDesDTO">
		INSERT INTO ANSWERDESCRIPTIVE(ID, EXAMCODE, EXAMNUM, ANSWER, ORIGINFILE,
		NEWFILENAME)
		VALUES(#{id}, #{examcode}, #{examnum}, #{answer}, #{originfile}, #{newfilename})
	</insert>

	<!--학생 서술형 답안수정(답변경, 파일변경)  -->
	<update id="answerd_modify" parameterType="AnswerDesDTO">
		UPDATE ANSWERDESCRIPTIVE
		SET ANSWER = #{answer}, ORIGINFILE = #{originfile}, NEWFILENAME=#{newfilename}
		WHERE ID = #{id} AND EXAMNUM = #{examnum}
	</update>

	<!--(강사)학생 서술형 답안 조회 -->
	<select id="answerd_select" parameterType="java.util.Map"
		resultType="AnswerDesDTO">
		SELECT EXAMNUM, ANSWER, ORIGINFILE, NEWFILENAME
		FROM ANSWERDESCRIPTIVE
		WHERE ID = #{id} AND EXAMNUM = #{examnum}
		ORDER BY EXAMNUM
	</select>

	<!--학생 선택형 답안 등록   -->
	<insert id="answers_insert" parameterType="AnswerSelDTO">
		INSERT INTO ANSWERSELECT(ID, EXAMCODE, EXAMNUM, ANSWER)
		VALUES (#{id}, #{examcode}, #{examnum}, #{answer})
	</insert>

	<!--학생 선택형 답안 등록 수정   -->
	<update id="answers_modify" parameterType="AnswerSelDTO">
		UPDATE ANSWERSELECT
		SET ANSWER = #{answer}
		WHERE ID=#{id} AND EXAMCODE = #{examcode} AND EXAMNUM = #{examnum}
	</update>

	<!-- 학생 선택형 답안 등록 조회  -->
	<select id="answers_select" parameterType="java.util.Map" resultType="java.lang.String">
		SELECT NVL(ANSWER,0)
		FROM ANSWERSELECT
		WHERE ID= #{id} AND EXAMNUM = #{examnum}
	</select>

	<!--등록_학생점수채점(서술형)  -->
	<insert id="score_insertd" parameterType="ScoreDTO">
		INSERT INTO SCORE(ID, EXAMCHECK, TESTCODE, EXAMCODE, SCORE)
		VALUES(#{id}, 'N', #{testcode}, #{examcode}, #{score})
	</insert>

	<!--등록-자동채점(선택형)  -->
	<insert id="score_inserts" parameterType="ScoreDTO">
		INSERT INTO SCORE(ID, EXAMCHECK, TESTCODE, EXAMCODE, SCORE)
		VALUES(#{id}, 'N', #{testcode}, #{examcode}, (SELECT (CASE WHEN T1.AW='H' THEN ALLOT ELSE 0 END) FROM
(SELECT (CASE WHEN C_ANSWER=ANSWER THEN 'H' ELSE 'F' END) AW, ANSWERSELECT.EXAMCODE AE, id
	FROM ANSWERSELECT JOIN EXAMSELECT ON ANSWERSELECT.EXAMCODE=EXAMSELECT.EXAMCODE	) T1
	JOIN TEST_EXAM T2
		ON T1.AE = T2.EXAMCODE
	WHERE T1.ID=#{id} AND T2.EXAMCODE=#{examcode}))
	</insert>

	<!--학생 서술형 점수 수정  -->
	<update id="score_modify" parameterType="ScoreDTO">
		UPDATE SCORE
		SET SCORE=#{score}
		WHERE ID=#{id}
		AND TESTCODE = #{testcode}
		AND EXAMCODE =#{examcode}
	</update>

	<!-- 학생 점수 조회 -->
	<select id="score_select" parameterType="java.util.Map" resultType="ScoreDTO">
		SELECT ID,NAME ,SCORE
		FROM SCORE JOIN STUDENT USING (ID)
		WHERE ID = #{id}
		AND TESTCODE = #{testcode}
		AND EXAMCODE = #{examcode}
	</select>

	<!-- 총점 조회 -->
	<select id="score_selectsum" parameterType="java.util.Map" resultType="ScoreDTO">
		SELECT SUM(SCORE) AS SCORE, ID, NAME 
		FROM SCORE JOIN STUDENT USING(ID) WHERE TESTCODE = #{testcode} AND ID =#{id} GROUP BY ID,NAME
	</select>
	
	<!-- 채점 완료 확인 -->
	<select id="score_allcheck" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT COUNT(*)
		FROM SCORE
			WHERE ID = #{id}
			AND TESTCODE = #{testcode}
	</select>
	
	<!-- 성적테이블 체크변경 -->
	<update id="score_chkupdate" parameterType="java.util.Map" >
	UPDATE SCORE SET EXAMCHECK='Y' 
		WHERE ID = #{id}
			AND TESTCODE = #{testcode}
	</update>
	
	<!-- 과제 평균 -->
	<select id="test_avg" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT NVL(AVG(SCORE),0)
FROM (SELECT SUM(SCORE) AS SCORE, ID, NAME
		FROM SCORE JOIN STUDENT USING(ID) WHERE TESTCODE = #{testcode} GROUP BY ID,NAME)
	</select>



</mapper>
